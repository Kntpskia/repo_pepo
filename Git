Git - Распределенныя система контроля версий
head-текущее сотояние объекта ( ветка)
Мердж- слияние
Централизованный подход хранения данных- версия только на центральном сервере
Распределенный - полная копия проекта на ПО разработчика + на сервере

Гит хранит версию -отдельный снимок проекта во времени- все изменения является одной новой версией

СОзданный файл в гите по дефолту в статусе untracked- не отслеживаемый
git add переводит в статус  staged - подготовленный, подготовленнная зона
Изменили файл- modified
git commit -committed зафиксированный, делает снимок проекта

КОМАНДЫ

-- две черты озанчает обычный текс (например путь до файла\назавние файла а не ветки мастер )

git init -создание репозитория в папке
git log - получение хэша коммита
git status
git add
git commit -m"Сообщение снимка"
git commit -a -m "Сообщение снимка"  добваляет модифицироавнные файлы ,а не новые. Для новых нуженн add
git commit --amend -m "Сообщение снимка" Дополняет последний коммит ,новый коммит не создается


git diff- разинца между текущим неотслеживаемым состоянием репозитория  и последним  состоянием в репозитории
git diff --staged - разница между отслеживаемым состоянием и последним зафиксированным у репозитория.
git diff COMMIT_ID - разница между текущим состоянием репозитория и указанным снимком(COMMIT_ID),
который можно посмотреть через git log.


git reset -Отмена до последнего коммита (те. неостлеживаемые изменнения-остаются неотслеживаемыми,ничего не происходит, мы их не можем удалить)
git reset head~количество смещения влево
--soft переводит в коммит после указанного в отслеживаемую зону ,они не удаляются
--mixed переводит в коммит после указанного в неотслеживаемую зону ,они не удаляются ПО УМОЛЧАНИЮ
--hard удаляются изменения и режим работы без возвратно как отслеживаемые так и не отслеживаемые
git reset --mixed commit_id



Git checkout -переключение между коммитами\версиями файлов\ ветками
git checkout commit_id
git checkout - пермещение между версиями файлов - возвращение файлов к прошлой версии в текущем коммите.
git checkout хэш коммита --путь до файла.
git checkout -- файл откатит версию до последнего коммита
git checkout -- . все файлы до последнего коммита - все неотслеживаемые удалятся

git clean - удалить добавленные файлы (неотслеживаеммые)
git clean -n показывает файл ,который будет удален
git clean -f удаляет этот файл


git remote -v - просмотр списка существующих удаленных репозиториев
git remote add  НАЗВАНИЕ_РЕПОЗИТОРИЯ АДРЕС_РЕПОЗИТОРИЯ - добавить новый удаленный репозиторий, находящийся по указанному адресу
git remote remove НАЗВАНИЕ_РЕПОЗИТОРИЯ - удалить репозиторий с указанным названием

git push НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА - отправка локального репозитория на удаленный
git pull НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА - получения обновлений с удаленного репозитория.
git clone адресс - клонирование репозитория из публичного репозитория

git branch НАЗВАНИЕ ВЕТКИ - создание новой ветки.
git branch - просмотр, на какой ветки находится.
git branch -d НАЗВАНИЕ ВЕТКИ - удаление ветки.

///
git branch ветка
git checkout мастер ,а потом git merge ветка
Все в мастере
ПОтом удаляем ветку нашу
git branch -d ветка
////

git merge - сливает одну ветку с другой..

